version: 2.1

jobs:
    build:
        machine:
            image: ubuntu-1604:201903-01
            docker_layer_caching: true
        environment:
            HOST_USER_IDS: "1001:1002"
        steps:
            - checkout
            - run:
                name: Create "proxy" Docker network (ignore if it already exists)
                command: docker network create proxy || true
            - run:
                name: Build docker images
                command: make build-dev
            - run:
                name: Archive Docker images
                command: |
                    docker save -o back-end-image.tar carcel/skeleton/php:7.3
                    docker save -o front-end-image.tar carcel/skeleton/node:lts
            - run:
                name: Create cache directory for back-end dependencies
                command: mkdir -p ~/.cache/composer
            - run:
                name: Create configuration directory for back-end dependencies
                command: mkdir -p ~/.config/composer
            - restore_cache:
                keys:
                    - composer-v1-{{ checksum "back/composer.lock" }}
                    - composer-v1-
            - run:
                name: Create Yarn file and folders for configuration and cache
                command: |
                    touch ~/.yarnrc
                    mkdir ~/.yarn
                    mkdir -p ~/.cache/yarn
            - restore_cache:
                keys:
                    - node-v1-{{ checksum "front/yarn.lock" }}
                    - node-v1-
            - run:
                name: Install both back-end and front-end dependencies
                command: make dependencies
            - save_cache:
                key: composer-v1-{{ checksum "back/composer.lock" }}
                paths:
                    - ~/.cache/composer
            - save_cache:
                key: node-v1-{{ checksum "front/yarn.lock" }}
                paths:
                    - ~/.cache/yarn
            - run:
                name: Create directories for tests results
                command: mkdir -p back/var/tests/behat back/var/tests/phpunit front/var/tests/tslint
            - persist_to_workspace:
                root: ~/
                paths:
                    - project
                    - back-end-image.tar
                    - front-end-image.tar
    test:
        machine:
            image: ubuntu-1604:201903-01
            docker_layer_caching: true
        environment:
            HOST_USER_IDS: "1001:1002"
        steps:
            - run:
                name: Create "proxy" Docker network (ignore if it already exists)
                command: docker network create proxy || true
            - attach_workspace:
                at: ~/
            - run:
                name: Load archived Docker images
                command: |
                    docker load -i back-end-image.tar
                    docker load -i front-end-image.tar
            - run:
                name: Create Yarn file and folders for configuration and cache
                command: |
                    touch ~/.yarnrc
                    mkdir ~/.yarn
                    mkdir -p ~/.cache/yarn
            - run:
                name: Run static analysis on the back-end application
                command: cd ~/project/back && docker-compose run --rm php vendor/bin/php-cs-fixer fix --dry-run -v --diff --config=.php_cs.php
            - run:
                name: Run unit tests of the back-end application
                command: cd ~/project/back && docker-compose run --rm php vendor/bin/phpunit --testsuite="Unit tests" --log-junit var/tests/phpunit/unit_tests.xml
            - run:
                name: Run acceptance tests of the back-end application
                command: cd ~/project/back && docker-compose run --rm php vendor/bin/behat -p acceptance -f junit -o var/tests/behat -f pretty -o std --colors
            - run:
                name: start MySQL container
                command: cd ~/project/back && docker-compose up -d mysql
            - run:
                name: Update database schema
                command: make mysql
            - run:
                name: Run integration tests on the back-end application
                command: cd ~/project/back && docker-compose run --rm php vendor/bin/phpunit --testsuite="Integration tests" --log-junit var/tests/phpunit/integration_tests.xml
            - run:
                name: Run end to end tests on the back-end application
                command: cd ~/project/back && docker-compose run --rm php vendor/bin/behat -p end-to-end -f junit -o var/tests/behat -f pretty -o std --colors
            - run:
                name: Run static analysis on the front-end application
                command: cd ~/project/front && docker-compose run --rm node yarn run lint -t junit -o var/tests/tslint/lint.xml
            - run:
                name: Type-check the front-end application
                command: cd ~/project/front && docker-compose run --rm node yarn run type-check
            - store_test_results:
                path: front/var/tests
            - store_artifacts:
                path: front/var/tests
            - store_test_results:
                path: back/var/tests
            - store_artifacts:
                path: back/var/tests

workflows:
    version: 2
    pull_request:
        jobs:
            - build:
                  filters:
                      branches:
                          ignore:
                              - master
            - test:
                requires:
                    - build
    weekly:
        triggers:
            - schedule:
                cron: "0 0 * * 1"
                filters:
                    branches:
                        only:
                            - master
        jobs:
            - build
            - test:
                requires:
                    - build
