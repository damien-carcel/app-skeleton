version: 2.1

# Aliases

executor-config: &executor-config
    machine:
        image: ubuntu-1604:202004-01
    environment:
        COMPOSE_DOCKER_CLI_BUILD: 1
        DOCKER_BUILDKIT: 1
        HOST_USER_IDS: "1001:1002"

# -----

jobs:
    test-api:
        <<: *executor-config
        steps:
            - checkout
            - run:
                name: Build the API Docker images
                command: make build-api-dev
            - run:
                name: Create cache and configuration directories for the API dependencies
                command: |
                    mkdir -p ~/.cache/composer
                    mkdir -p ~/.config/composer
            - restore_cache:
                keys:
                    - composer-{{ .Environment.CACHE_VERSION }}-{{ checksum "api/composer.lock" }}
                    - composer-{{ .Environment.CACHE_VERSION }}-
            - run:
                name: Install API dependencies
                command: make api/vendor
            - save_cache:
                key: composer-{{ .Environment.CACHE_VERSION }}-{{ checksum "api/composer.lock" }}
                paths:
                    - ~/.cache/composer
            - run:
                name: Create report directory
                command: mkdir api/reports
            - run:
                name: Run API static analysis - PHP CS Fixer
                command: make api-coding-standards
            - run:
                name: Run API static analysis - PHP Coding Sniffer
                command: make sniff-api-code
            - run:
                name: Run API static analysis - PHPStan
                command: make analyse-api-code
            - run:
                name: Run coupling detector
                command: make api-coupling
            - run:
                name: Run API unit tests
                command: make api-unit-tests IO="--log-junit reports/unit_tests.xml"
            - run:
                name: Run API acceptance tests
                command: make api-acceptance-tests IO="-f junit -o reports/acceptance"
            - run:
                name: start MySQL container
                command: cd ~/project/api && docker-compose up -d mysql
            - run:
                name: Update database schema
                command: make mysql
            - run:
                name: Run API integration tests
                command: make api-integration-tests IO="--log-junit reports/integration_tests.xml ${IO}"
            - run:
                name: Run API end to end tests
                command: make api-end-to-end-tests IO="-f junit -o reports/e2e"
            - store_test_results:
                path: api/reports
            - store_artifacts:
                path: api/reports
            - store_artifacts:
                path: api/var/log

    test-client:
        <<: *executor-config
        steps:
            - checkout
            - run:
                name: Build the client Docker images
                command: make build-client-dev
            - run:
                name: Create cache and configuration directories for the client dependencies
                command: |
                    touch ~/.yarnrc
                    mkdir ~/.yarn
                    mkdir -p ~/.cache/yarn
            - restore_cache:
                keys:
                    - node-{{ .Environment.CACHE_VERSION }}-{{ checksum "client/yarn.lock" }}
                    - node-{{ .Environment.CACHE_VERSION }}-
            - run:
                name: Install client dependencies
                command: make client/node_modules
            - save_cache:
                key: node-{{ .Environment.CACHE_VERSION }}-{{ checksum "client/yarn.lock" }}
                paths:
                    - ~/.cache/yarn
            - persist_to_workspace:
                root: ~/
                paths:
                    - project
            - run:
                name: Create report directory
                command: mkdir client/reports
            - run:
                name: Lint CSS/LESS code
                command: make stylelint IO="--custom-formatter 'node_modules/stylelint-junit-formatter' > reports/stylelint.xml"
            - run:
                name: Lint JavaScript/TypeScript code
                command: make eslint IO="--no-fix -f junit > reports/eslint.xml"
            - run:
                name: Run TS type checking
                command: make type-check-client
            - run:
                name: Run client unit tests
                command: make client-unit-tests IO="--ci --reporters=default --reporters=jest-junit"
            - store_test_results:
                path: client/reports
            - store_artifacts:
                path: client/reports

    test-e2e:
        <<: *executor-config
        steps:
            - attach_workspace:
                at: ~/
            - restore_cache:
                keys:
                    - node-{{ .Environment.CACHE_VERSION }}-{{ checksum "client/yarn.lock" }}
                    - node-{{ .Environment.CACHE_VERSION }}-
            - run:
                name: Install mkcert
                command: |
                    sudo apt-get update
                    sudo apt-get install libnss3-tools
                    sudo curl -Lo /usr/local/bin/mkcert https://github.com/FiloSottile/mkcert/releases/download/v1.4.1/mkcert-v1.4.1-linux-amd64
                    sudo chmod +x /usr/local/bin/mkcert
                    mkcert -install
            - run:
                name: Install the application in production-like conditions
                command: |
                    make build-api-dev
                    make serve
            - run:
                name: Create report directory
                command: mkdir client/reports
            - run:
                name: Set the project permissions so the "node" user of the Cypress Docker image can access it
                command: |
                    sudo chown -R 1000:1000 ~/project
                    sudo chown -R 1000:1000 ~/.cache/yarn
            - run:
                name: Run client end to end tests
                command: make client-end-to-end-tests IO="--headless --reporter mocha-junit-reporter --reporter-options mochaFile=./reports/e2e.xml"
            - run:
                name: Set back the project permissions so the CircleCI user so the test results and artefact can be used
                command: sudo chown -R 1001:1002 ~/project
            - store_test_results:
                path: client/reports
            - store_artifacts:
                path: client/reports
            - store_artifacts:
                path: client/tests/e2e/screenshots
            - store_artifacts:
                path: client/tests/e2e/videos

workflows:
    version: 2
    pull_request:
        jobs:
            - test-api:
                filters:
                    branches:
                        ignore:
                            - master
            - test-client:
                filters:
                    branches:
                        ignore:
                            - master
            - test-e2e:
                requires:
                    - test-api
                    - test-client
                filters:
                    branches:
                        ignore:
                            - master
