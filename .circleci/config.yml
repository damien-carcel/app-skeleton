version: 2.1

# Aliases

executor-config: &executor-config
    machine:
        image: ubuntu-1604:202004-01
    environment:
        HOST_USER_IDS: "1001:1002"

# -----

commands:
    proxy-network:
        description: Create "proxy" Docker network (ignore if it already exists)
        steps:
            - run:
                name: Create "proxy" Docker network (ignore if it already exists)
                command: docker network create proxy || true

# -----

jobs:
    test-api:
        <<: *executor-config
        steps:
            - checkout
            - proxy-network
            - run:
                name: Build the API Docker images
                command: make build-api-dev
            - run:
                name: Create cache and configuration directories for the API dependencies
                command: |
                    mkdir -p ~/.cache/composer
                    mkdir -p ~/.config/composer
            - restore_cache:
                keys:
                    - composer-v1-{{ checksum "api/composer.lock" }}
                    - composer-v1-
            - run:
                name: Install API dependencies
                command: make api/vendor
            - save_cache:
                key: composer-v1-{{ checksum "api/composer.lock" }}
                paths:
                    - ~/.cache/composer
            - run:
                name: Run static analysis - PHP Coding Standards Fixer
                command: make coding-standard-api
            - run:
                name: Run static analysis - PHP Coding Sniffer
                command: make sniff-code-api
            - run:
                name: Run static analysis - PHPStan
                command: make analyse-api
            - run:
                name: Run coupling detector
                command: make coupling-api
            - run:
                name: Run unit tests
                command: make unit-api
            - run:
                name: Run acceptance tests
                command: make acceptance-api
            - run:
                name: start MySQL container
                command: cd ~/project/api && docker-compose up -d mysql
            - run:
                name: Update database schema
                command: make mysql
            - run:
                name: Run integration tests
                command: make integration-api
            - run:
                name: Run end to end tests
                command: make end-to-end-api
            - store_test_results:
                path: api/tests/results
            - store_artifacts:
                path: api/tests/results
            - store_artifacts:
                path: api/var/log

    test-client:
        <<: *executor-config
        steps:
            - checkout
            - proxy-network
            - run:
                name: Build the client Docker images
                command: make build-client-dev
            - run:
                name: Create cache and configuration directories for the client dependencies
                command: |
                    touch ~/.yarnrc
                    mkdir ~/.yarn
                    mkdir -p ~/.cache/yarn
            - restore_cache:
                keys:
                    - node-v1-{{ checksum "client/yarn.lock" }}
                    - node-v1-
            - run:
                name: Install client dependencies
                command: make client/node_modules
            - save_cache:
                key: node-v1-{{ checksum "client/yarn.lock" }}
                paths:
                    - ~/.cache/yarn
            - run:
                name: Lint CSS/LESS code
                command: make stylelint
            - run:
                name: Lint JavaScript/TypeScript code
                command: make lint-client
            - run:
                name: Run type checking
                command: make type-check-client
            - run: # This will eventually be replace by a full production build + deployment
                name: Test the client production build
                command: cd client && docker-compose run --rm node yarn run webpack:build
            - store_test_results:
                path: client/tests/results
            - store_artifacts:
                path: client/tests/results

workflows:
    version: 2
    pull_request:
        jobs:
            - test-api:
                filters:
                    branches:
                        ignore:
                            - master
            - test-client:
                filters:
                    branches:
                        ignore:
                            - master
    weekly:
        triggers:
            - schedule:
                cron: "0 0 * * 1"
                filters:
                    branches:
                        only:
                            - master
        jobs:
            - test-api
            - test-client
