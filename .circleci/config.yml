version: 2.1

# Aliases

executor-config: &executor-config
  machine:
    image: ubuntu-2004:202104-01
  environment:
    COMPOSE_DOCKER_CLI_BUILD: 1
    DOCKER_BUILDKIT: 1
    HOST_USER_IDS: "1001:1002"

# -----

jobs:
  tests:
    <<: *executor-config
    steps:
      - checkout
      - run:
          name: Build all the Docker images
          command: |
            docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASSWORD
            make -j build-dev
      - run:
          name: Create cache and configuration directories for the API dependencies
          command: |
            mkdir -p ~/.cache/composer
            mkdir -p ~/.config/composer
      - restore_cache:
          name: Restore the "vendor" directory
          keys:
            - vendor-{{ .Environment.CACHE_VERSION }}-{{ checksum "api/composer.lock" }}
            - vendor-{{ .Environment.CACHE_VERSION }}-
      - run:
          name: Create cache and configuration directories for the client dependencies
          command: |
            touch ~/.yarnrc
            mkdir -p ~/.yarn
            mkdir -p ~/.cache/yarn
      - restore_cache:
          name: Restore the "node_modules" directory
          keys:
            - node_modules-{{ .Environment.CACHE_VERSION }}-{{ checksum "client/yarn.lock" }}
            - node_modules-{{ .Environment.CACHE_VERSION }}-
      - run:
          name: Install all dependencies in parallel
          command: make -j dependencies
      - save_cache:
          name: Cache the "vendor" directory
          key: vendor-{{ .Environment.CACHE_VERSION }}-{{ checksum "api/composer.lock" }}
          paths:
            - api/vendor
      - save_cache:
          name: Cache the "node_modules" directory
          key: node_modules-{{ .Environment.CACHE_VERSION }}-{{ checksum "client/yarn.lock" }}
          paths:
            - client/node_modules
      - run:
          name: Create report directory
          command: mkdir -p api/reports
      - run:
          name: Lint API code
          command: make lint-api-code
      - run:
          name: Run API static analysis
          command: make analyse-api-code
      - run:
          name: Run coupling detector
          command: make api-coupling
      - run:
          name: Run PHP mess detector
          command: make phpmd
      - run:
          name: Run API unit tests
          command: make api-unit-tests IO="--format=junit" > api/reports/unit_tests.xml
      - run:
          name: Run API acceptance tests in memory
          command: make api-acceptance-tests-in-memory IO="-f junit -o reports/acceptance_in_memory"
      - run:
          name: Start PostgreSQL container and update database schema
          command: make database
      - run:
          name: Run API acceptance tests with I/O
          command: make api-acceptance-tests-with-io IO="-f junit -o reports/acceptance_with_io"
      - run:
          name: Run API integration tests
          command: make api-integration-tests IO="-f junit -o reports/integration"
      - run:
          name: Create report directory
          command: mkdir -p client/reports
      - run:
          name: Lint CSS code
          command: make stylelint IO="--custom-formatter 'node_modules/stylelint-junit-formatter' > reports/stylelint.xml"
      - run:
          name: Lint TypeScript code
          command: make eslint IO="--no-fix -f junit > reports/eslint.xml"
      - run:
          name: Run TypeScript type checking
          command: make type-check-client
      - run:
          name: Run client unit tests
          command: make client-unit-tests IO="--watchAll=false --ci --reporters=default --reporters=jest-junit"
      - run:
          name: Set back the project permissions so the CircleCI user so the test results and artefact can be used
          command: sudo chown -R 1001:1002 ~/project
      - store_test_results:
          path: api/reports
      - store_artifacts:
          path: api/reports
      - store_artifacts:
          path: api/var/log
      - store_test_results:
          path: client/reports
      - store_artifacts:
          path: client/reports

workflows:
  pull_request:
    jobs:
      - tests:
          context:
            - docker-hub-credentials
          filters:
            branches:
              ignore:
                - main
