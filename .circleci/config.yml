version: 2

jobs:
    build:
        machine:
            enabled: true
            docker_layer_caching: true
        environment:
            CURRENT_IDS: "1001:1002"
        steps:
            - checkout
            - run:
                name: Create "proxy" Docker network (ignore if it already exists)
                command: docker network create proxy || true
            - run:
                name: Build front-end docker images
                command: |
                    cd ~/project/front
                    docker-compose pull --ignore-pull-failures
                    docker-compose build --pull
            - run:
                name: Copy docker-compose override for front-end
                command: cp ~/project/.circleci/front/docker-compose.override.yaml.dist ~/project/front/docker-compose.override.yaml
            - run:
                name: Create cache directory for front-end dependencies
                command: mkdir -p ~/.cache/yarn
            - run:
                name: Create Yarn configuration file and folder if not already present
                command: |
                    touch ~/.yarnrc
                    mkdir ~/.yarn
            - restore_cache:
                keys:
                    - node-v1-{{ checksum "front/yarn.lock" }}
                    - node-v1-
            - run:
                name: Install front-end dependencies
                command: cd ~/project/front && docker-compose run --rm node yarn install
            - save_cache:
                key: node-v1-{{ checksum "front/yarn.lock" }}
                paths:
                    - ~/.cache/yarn
            - restore_cache:
                keys:
                    - composer-v1-{{ checksum "back/composer.lock" }}
                    - composer-v1-
            - run:
                name: Build back-end docker images
                command: |
                    cd ~/project/back
                    docker-compose pull --ignore-pull-failures
                    docker-compose build --pull
            - run:
                name: Copy docker-compose override for back-end
                command: cp ~/project/.circleci/back/docker-compose.override.yaml.dist ~/project/back/docker-compose.override.yaml
            - run:
                name: Create cache directory for back-end dependencies
                command: mkdir -p ~/.cache/composer
            - run:
                name: Create configuration directory for back-end dependencies
                command: mkdir -p ~/.config/composer
            - run:
                name: Install back-end dependencies
                command: cd ~/project/back && docker-compose run --rm php composer install --prefer-dist --optimize-autoloader --no-interaction --no-scripts
            - save_cache:
                key: composer-v1-{{ checksum "back/composer.lock" }}
                paths:
                    - ~/.cache/composer
            - run:
                name: Create directories for tests results
                command: mkdir -p back/var/tests/behat back/var/tests/phpspec front/var/tests/tslint
            - persist_to_workspace:
                root: ~/
                paths:
                    - project
    test:
        machine:
            enabled: true
            docker_layer_caching: true
        environment:
            CURRENT_IDS: "1001:1002"
        steps:
            - run:
                name: Create "proxy" Docker network (ignore if it already exists)
                command: docker network create proxy || true
            - attach_workspace:
                at: ~/
            - run:
                name: Create cache directory for front-end dependencies
                command: mkdir -p ~/.cache/yarn
            - run:
                name: Create yarnrc if not already present
                command: touch ~/.yarnrc
            - run:
                name: Create Yarn configuration file and folder if not already present
                command: |
                    touch ~/.yarnrc
                    mkdir ~/.yarn
            - run:
                name: Run static analysis on the front-end application
                command: cd ~/project/front && docker-compose run --rm node yarn run lint -t junit -o var/tests/tslint/lint.xml
            - run:
                name: Type-check the front-end application
                command: cd ~/project/front && docker-compose run --rm node yarn run type-check
            - run:
                name: Run static analysis on the back-end application
                command: cd ~/project/back && docker-compose run --rm php vendor/bin/php-cs-fixer fix --dry-run -v --diff --config=.php_cs.php
            - run:
                name: Run static analysis on the unit tests of the back-end application
                command: cd ~/project/back && docker-compose run --rm php vendor/bin/php-cs-fixer fix --dry-run -v --diff --config=.php_cs.phpspec.php
            - run:
                name: Run PHPUnit tests
                command: cd ~/project/back && docker-compose run --rm php vendor/bin/phpunit
            - run:
                name: Run unit tests of the back-end application
                command: cd ~/project/back && docker-compose run --rm php vendor/bin/phpspec run --format=junit > var/tests/phpspec/specs.xml && docker-compose run --rm php vendor/bin/phpunit
            - run:
                name: Run acceptance tests of the back-end application
                command: cd ~/project/back && docker-compose run --rm php sh -c "vendor/bin/behat -p acceptance -f junit -o var/tests/behat -f pretty -o std --colors"
            - run:
                name: start MySQL container
                command: cd ~/project/back && docker-compose up -d mysql
            - run:
                name: Update database schema
                command: |
                    cd ~/project && sh .circleci/back/wait_for_mysql.sh
                    cd ~/project/back && docker-compose run --rm php bin/console doctrine:schema:update --force
            - run:
                name: Run integration tests on the back-end application
                command: cd ~/project/back && docker-compose run --rm php sh -c "vendor/bin/behat -p integration -f junit -o var/tests/behat -f pretty -o std --colors"
            - run:
                name: Run end to end tests on the back-end application
                command: cd ~/project/back && docker-compose run --rm php sh -c "vendor/bin/behat -p end-to-end -f junit -o var/tests/behat -f pretty -o std --colors"
            - store_test_results:
                path: front/var/tests
            - store_test_results:
                path: front/var/tests
            - store_artifacts:
                path: back/var/tests
            - store_artifacts:
                path: back/var/tests

workflows:
    version: 2
    pull_request:
        jobs:
            - wait_for_user_approval:
                type: approval
                filters:
                    branches:
                        ignore:
                            - master
            - build:
                requires:
                    - wait_for_user_approval
            - test:
                requires:
                    - build
    weekly:
        triggers:
            - schedule:
                cron: "0 0 * * 1"
                filters:
                    branches:
                        only:
                            - master
        jobs:
            - build
            - test:
                requires:
                    - build
