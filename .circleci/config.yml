version: 2.1

# Aliases

executor-config: &executor-config
    machine:
        image: ubuntu-1604:202004-01
    environment:
        COMPOSE_DOCKER_CLI_BUILD: 1
        DOCKER_BUILDKIT: 1
        HOST_USER_IDS: "1001:1002"

# -----

commands:
    proxy-network:
        description: Create "proxy" Docker network (ignore if it already exists)
        steps:
            - run:
                name: Create "proxy" Docker network (ignore if it already exists)
                command: docker network create proxy || true

# -----

jobs:
    test-api:
        <<: *executor-config
        steps:
            - checkout
            - proxy-network
            - run:
                name: Build the API Docker images
                command: make build-api-dev
            - run:
                name: Create cache and configuration directories for the API dependencies
                command: |
                    mkdir -p ~/.cache/composer
                    mkdir -p ~/.config/composer
            - restore_cache:
                keys:
                    - composer-{{ .Environment.CACHE_VERSION }}-{{ checksum "api/composer.lock" }}
                    - composer-{{ .Environment.CACHE_VERSION }}-
            - run:
                name: Install API dependencies
                command: make api/vendor
            - save_cache:
                key: composer-{{ .Environment.CACHE_VERSION }}-{{ checksum "api/composer.lock" }}
                paths:
                    - ~/.cache/composer
            - run:
                name: Run API static analysis - PHP CS Fixer
                command: make api-coding-standards
            - run:
                name: Run API static analysis - PHP Coding Sniffer
                command: make sniff-api-code
            - run:
                name: Run API static analysis - PHPStan
                command: make analyse-api-code
            - run:
                name: Run coupling detector
                command: make api-coupling
            - run:
                name: Run API unit tests
                command: make api-unit-tests
            - run:
                name: Run API acceptance tests
                command: make api-acceptance-tests
            - run:
                name: start MySQL container
                command: cd ~/project/api && docker-compose up -d mysql
            - run:
                name: Update database schema
                command: make mysql
            - run:
                name: Run API integration tests
                command: make api-integration-tests
            - run:
                name: Run API end to end tests
                command: make api-e2e-tests
            - store_test_results:
                path: api/tests/results
            - store_artifacts:
                path: api/tests/results
            - store_artifacts:
                path: api/var/log

    test-client:
        <<: *executor-config
        steps:
            - checkout
            - proxy-network
            - run:
                name: Build the client Docker images
                command: make build-client-dev
            - run:
                name: Create cache and configuration directories for the client dependencies
                command: |
                    touch ~/.yarnrc
                    mkdir ~/.yarn
                    mkdir -p ~/.cache/yarn
            - restore_cache:
                keys:
                    - node-{{ .Environment.CACHE_VERSION }}-{{ checksum "client/yarn.lock" }}
                    - node-{{ .Environment.CACHE_VERSION }}-
            - run:
                name: Install client dependencies
                command: make client/node_modules
            - save_cache:
                key: node-{{ .Environment.CACHE_VERSION }}-{{ checksum "client/yarn.lock" }}
                paths:
                    - ~/.cache/yarn
            - run:
                name: Create report directory
                command: mkdir client/reports
            - run:
                name: Lint CSS/LESS code
                command: make stylelint O="--custom-formatter 'node_modules/stylelint-junit-formatter' > reports/stylelint.xml"
            - run:
                name: Lint JavaScript/TypeScript code
                command: make eslint O="--no-fix -f junit > reports/eslint.xml"
            - run:
                name: Run TS type checking
                command: make type-check-client
            - run:
                name: Run client unit tests
                command: make client-unit-tests O="--ci --reporters=default --reporters=jest-junit"
            - run:
                name: Run client end to end tests with Chrome
                command: make client-e2e-tests-with-chrome
# To be added back later, once we understand why Nightwatch with Firefox is failing on CircleCI.
#            - run:
#                name: Run client end to end tests with Firefox
#                command: make client-e2e-tests-with-firefox
            - store_test_results:
                path: client/reports
            - store_artifacts:
                path: client/reports
            - store_test_results:
                path: client/tests/e2e/reports
            - store_artifacts:
                path: client/tests/e2e/reports

workflows:
    version: 2
    pull_request:
        jobs:
            - test-api:
                filters:
                    branches:
                        ignore:
                            - master
            - test-client:
                filters:
                    branches:
                        ignore:
                            - master
    weekly:
        triggers:
            - schedule:
                cron: "0 0 * * 1"
                filters:
                    branches:
                        only:
                            - master
        jobs:
            - test-api
            - test-client
